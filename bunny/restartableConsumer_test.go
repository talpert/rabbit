// Original code generated by counterfeiter. Modified to meet our needs
package bunny

import (
	"sync"
)

type fakeRestartableConsumer struct {
	getIDStub        func() string
	getIDMutex       sync.RWMutex
	getIDArgsForCall []struct {
	}
	getIDReturns struct {
		result1 string
	}
	getIDReturnsOnCall map[int]struct {
		result1 string
	}
	getStatusStub        func() status
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct {
	}
	getStatusReturns struct {
		result1 status
	}
	getStatusReturnsOnCall map[int]struct {
		result1 status
	}
	restartStub        func(amqpChannel) error
	restartMutex       sync.RWMutex
	restartArgsForCall []struct {
		arg1 amqpChannel
	}
	restartReturns struct {
		result1 error
	}
	restartReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeRestartableConsumer) getID() string {
	fake.getIDMutex.Lock()
	ret, specificReturn := fake.getIDReturnsOnCall[len(fake.getIDArgsForCall)]
	fake.getIDArgsForCall = append(fake.getIDArgsForCall, struct {
	}{})
	stub := fake.getIDStub
	fakeReturns := fake.getIDReturns
	fake.recordInvocation("getID", []interface{}{})
	fake.getIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *fakeRestartableConsumer) GetIDCallCount() int {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return len(fake.getIDArgsForCall)
}

func (fake *fakeRestartableConsumer) GetIDCalls(stub func() string) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.getIDStub = stub
}

func (fake *fakeRestartableConsumer) GetIDReturns(result1 string) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.getIDStub = nil
	fake.getIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *fakeRestartableConsumer) GetIDReturnsOnCall(i int, result1 string) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.getIDStub = nil
	if fake.getIDReturnsOnCall == nil {
		fake.getIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *fakeRestartableConsumer) getStatus() status {
	fake.getStatusMutex.Lock()
	ret, specificReturn := fake.getStatusReturnsOnCall[len(fake.getStatusArgsForCall)]
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct {
	}{})
	stub := fake.getStatusStub
	fakeReturns := fake.getStatusReturns
	fake.recordInvocation("getStatus", []interface{}{})
	fake.getStatusMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *fakeRestartableConsumer) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *fakeRestartableConsumer) GetStatusCalls(stub func() status) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.getStatusStub = stub
}

func (fake *fakeRestartableConsumer) GetStatusReturns(result1 status) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.getStatusStub = nil
	fake.getStatusReturns = struct {
		result1 status
	}{result1}
}

func (fake *fakeRestartableConsumer) GetStatusReturnsOnCall(i int, result1 status) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.getStatusStub = nil
	if fake.getStatusReturnsOnCall == nil {
		fake.getStatusReturnsOnCall = make(map[int]struct {
			result1 status
		})
	}
	fake.getStatusReturnsOnCall[i] = struct {
		result1 status
	}{result1}
}

func (fake *fakeRestartableConsumer) restart(arg1 amqpChannel) error {
	fake.restartMutex.Lock()
	ret, specificReturn := fake.restartReturnsOnCall[len(fake.restartArgsForCall)]
	fake.restartArgsForCall = append(fake.restartArgsForCall, struct {
		arg1 amqpChannel
	}{arg1})
	stub := fake.restartStub
	fakeReturns := fake.restartReturns
	fake.recordInvocation("restart", []interface{}{arg1})
	fake.restartMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *fakeRestartableConsumer) RestartCallCount() int {
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	return len(fake.restartArgsForCall)
}

func (fake *fakeRestartableConsumer) RestartCalls(stub func(amqpChannel) error) {
	fake.restartMutex.Lock()
	defer fake.restartMutex.Unlock()
	fake.restartStub = stub
}

func (fake *fakeRestartableConsumer) RestartArgsForCall(i int) amqpChannel {
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	argsForCall := fake.restartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *fakeRestartableConsumer) RestartReturns(result1 error) {
	fake.restartMutex.Lock()
	defer fake.restartMutex.Unlock()
	fake.restartStub = nil
	fake.restartReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeRestartableConsumer) RestartReturnsOnCall(i int, result1 error) {
	fake.restartMutex.Lock()
	defer fake.restartMutex.Unlock()
	fake.restartStub = nil
	if fake.restartReturnsOnCall == nil {
		fake.restartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeRestartableConsumer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeRestartableConsumer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
